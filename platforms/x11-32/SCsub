from __future__ import print_function
import os, glob, shutil, re
from SCons.Errors import UserError


Import("env")


env["bits"] = "32"
env.Append(CFLAGS="-m32")
env.Append(LINKFLAGS="-m32")


### Godot binary (to run tests) ###


if not env["godot_binary"]:
    env["godot_binary"] = File("godot.x11.opt.debug.32")
    env.Command(
        env["godot_binary"],
        None,
        "curl -L %s/godot.x11.opt.debug.32 -o ${TARGET} && chmod 750 ${TARGET}"
        % env["godot_release_base_url"],
    )
    env.NoClean(env["godot_binary"])


### GDnative stuff ###


if not env["gdnative_include_dir"]:
    env["gdnative_include_dir"] = Dir("../gdnative/include")
if not env["gdnative_wrapper_lib"]:
    env["gdnative_wrapper_lib"] = File(
        "../gdnative/libgdnative_wrapper_code.x11.opt.32.a"
    )
    env.Command(
        env["gdnative_wrapper_lib"],
        None,
        "curl -L %s/libgdnative_wrapper_code.x11.opt.32.a -o ${TARGET}"
        % env["godot_release_base_url"],
    )
    env.NoClean(env["gdnative_wrapper_lib"])


### Python interpreter ###


if env["backend"] == "cpython":
    cpython_version = env['CPYTHON_VERSION']
    cpython_major_minor = re.match(r'^[0-9]\.[0-9]+', cpython_version).group(0)

    cpython_src = Dir("cpython")
    env.Command(
        cpython_src,
        None,
        "git clone https://github.com/python/cpython.git --depth=1 --branch=v${CPYTHON_VERSION} --single-branch ${TARGET}",
    )
    env.NoClean(cpython_src)

    cpython_build = Dir("cpython_build")
    # TODO: allow to compile cpython with `--with-pydebug` ?
    # Compile CPython and install cffi through pip
    env.Command(
        cpython_build,
        cpython_src,
        "cd ${SOURCE} && " + "echo Configuring CPython... && "
        "./configure --build=x86_64-linux-gnu --host=i686-linux-gnu --enable-shared --disable-ipv6 --without-ensurepip ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no --prefix=${TARGET.get_abspath()} --with-openssl=/usr && "
        + "echo Building CPython... && "
        "make -j4 && " + "echo Installing CPython in ${TARGET.get_abspath()}... && "
        "make install && "
        + "export LD_LIBRARY_PATH=${TARGET.get_abspath()}/lib:LD_LIBRARY_PATH && curl -s https://bootstrap.pypa.io/get-pip.py | ${TARGET.get_abspath()}/bin/python3 && ${TARGET.get_abspath()}/bin/pip3 install cffi",
    )
    env.NoClean(cpython_build)

    def generate_build_dir(target, source, env):
        target = target[0]
        cpython_build = source[0]
        libpythonscript = source[1]
        godot_embedded = source[2]

        if os.path.isdir(target.path):
            shutil.rmtree(target.path)
        os.mkdir(target.path)

        def c(subpath):
            return os.path.join(cpython_build.abspath, subpath)

        def p(subpath=""):
            return os.path.join(target.abspath, "pythonscript", subpath)

        os.mkdir(p())

        shutil.copy(libpythonscript.path, p())
        open(p(".gdignore"), "w").close()

        if os.path.isdir(c("include")):
            # Windows build of CPython doesn't contain include dir
            shutil.copytree(c("include"), p("include"))

        # Remove __pycache__ to save lots of space
        for root, dirs, files in os.walk(c("lib")):
            if "__pycache__" in dirs:
                shutil.rmtree(os.path.join(root, "__pycache__"))

        shutil.copytree(c("bin"), p("bin"))

        shutil.copytree(c("lib"), p("lib"))
        if env["compressed_stdlib"]:
            shutil.move(p("lib/python" + cpython_major_minor), p("lib/tmp_python" + cpython_major_minor))
            os.mkdir(p("lib/python" + cpython_major_minor))
            shutil.move(
                p("lib/tmp_python" + cpython_major_minor + "/lib-dynload"), p("lib/python" + cpython_major_minor + "lib-dynload")
            )
            shutil.move(
                p("lib/tmp_python" + cpython_major_minor + "/site-packages"), p("lib/python" + cpython_major_minor + "/site-packages")
            )
            shutil.make_archive(
                base_name=p("lib/python" + cpython_major_minor),
                format="zip",
                root_dir=p("lib/tmp_python" + cpython_major_minor),
            )
            shutil.rmtree(p("lib/tmp_python" + cpython_major_minor))

        if env["dev_dyn"]:
            os.symlink(godot_embedded.abspath, p("lib/python" + cpython_major_minor + "/site-packages/godot"))
        else:
            shutil.copytree(godot_embedded.path, p("lib/python" + cpython_major_minor + "/site-packages/godot"))

        if "generate_build_dir_hook" in env:
            env["generate_build_dir_hook"](target.abspath)

    env["generate_build_dir"] = generate_build_dir
    env["backend_dir"] = cpython_build
    env.Append(CFLAGS="-DBACKEND_CPYTHON")
    env.Append(CFLAGS="-I %s/include/python%sm/" % (cpython_build.path, cpython_major_minor))
    env.Append(LIBPATH="%s/lib" % cpython_build.path)
    env.Append(LIBS=["python%sm" % cpython_major_minor])
    env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN/lib'"])

else:  # pypy

    PYPY_SRC_NAME = "pypy3-v6.0.0-linux32"
    PYPY_SRC_ARCHIVE = "%s.tar.bz2" % PYPY_SRC_NAME
    PYPY_SRC_ARCHIVE_URL = (
        "https://bitbucket.org/pypy/pypy/downloads/%s" % PYPY_SRC_ARCHIVE
    )

    pypy_build = Dir(PYPY_SRC_NAME)

    env.Command(
        PYPY_SRC_ARCHIVE, None, "curl -L %s -o ${TARGET}" % PYPY_SRC_ARCHIVE_URL
    )
    env.NoClean(PYPY_SRC_ARCHIVE)
    env.Command(pypy_build, PYPY_SRC_ARCHIVE, "tar xf ${SOURCE} -C ${TARGET.srcdir}")

    def generate_build_dir(target, source, env):
        target = target[0]
        pypy_build = source[0]
        libpythonscript = source[1]
        godot_embedded = source[2]

        if os.path.isdir(target.path):
            shutil.rmtree(target.path)
        os.mkdir(target.path)

        def c(subpath=""):
            return os.path.join(pypy_build.abspath, *subpath.split("/"))

        def p(subpath=""):
            return os.path.join(target.abspath, "pythonscript", *subpath.split("/"))

        shutil.copytree(c(), p())
        os.unlink(p("LICENSE"))
        os.unlink(p("README.rst"))
        shutil.copy(libpythonscript.path, p())
        open(p(".gdignore"), "w").close()

        if env["dev_dyn"]:
            os.symlink(godot_embedded.abspath, p("site-packages/godot"))
        else:
            shutil.copytree(godot_embedded.path, p("site-packages/godot"))

        if "generate_build_dir_hook" in env:
            env["generate_build_dir_hook"](target.abspath)

    env["generate_build_dir"] = generate_build_dir
    env["backend_dir"] = pypy_build
    env.Append(CFLAGS="-DBACKEND_PYPY")
    env.Append(CFLAGS="-I %s/include" % pypy_build.path)
    env.Append(LIBPATH="%s/bin" % pypy_build.path)
    env.Append(LIBS=["pypy3-c"])
    env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN/bin'"])
